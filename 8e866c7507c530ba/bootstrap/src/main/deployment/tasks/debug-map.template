(function(){
    var topologyOverride = window.W && window.W.statemapOrTopology && (window.W.statemapOrTopology.topology || window.W.statemapOrTopology);

    function getBaseFromTopologyWithOverride(name) {
        return topologyOverride && topologyOverride[name] ?
            topologyOverride[name] :
            serviceTopology.scriptsLocationMap[name];
    }

    var webBaseUrl = getBaseFromTopologyWithOverride('web');
    var bootstrapBaseUrl = getBaseFromTopologyWithOverride('bootstrap');

	var scripts = [
	<%= scripts %>
	];
	var editorScripts = [
		webBaseUrl + "/deployment/BootstrapEditor.js",
		webBaseUrl + "/deployment/DeployCommon.js",
		webBaseUrl + "/deployment/DeployEditor.js"
	];
	
	var viewerScripts = [
	    webBaseUrl + "/deployment/PageLoadUtility.js",
        webBaseUrl + "/deployment/ViewerDeploymentLogs.js",
		webBaseUrl + "/deployment/BootstrapViewer.js",
		webBaseUrl + "/deployment/DeployCommon.js",
		webBaseUrl + "/deployment/DeployViewer.js"
	];

    var testScript = [
        webBaseUrl + "/deployment/" + "PageLoadUtility.js",
        webBaseUrl + "/deployment/" + "ViewerDeploymentLogs.js",
        webBaseUrl + "/deployment/" + "BootstrapViewer.js",
        webBaseUrl + "/deployment/" + "BootstrapEditor.js",
        webBaseUrl + "/deployment/" + "TestTags.js",
        webBaseUrl + "/deployment/" + "DeployCommon.js"
    ];

    if (window.testMode === true) {
        scripts = scripts.concat(testScript);
    }else if (window.viewMode === 'editor'){
		scripts = scripts.concat(editorScripts);
	}else{
		scripts = scripts.concat(viewerScripts);
	}

    var head = document.getElementsByTagName("head")[0] || document.documentElement;

	function loadNext(){
		if (scripts.length > 0){
			var url = scripts.shift();
			var script = document.createElement("script");
			script.type = "text/javascript";
			script.src = url;
			var done = false;
            // Attach handlers for all browsers
            script.onload = script.onreadystatechange = function() {
                if ( !done && (!this.readyState || this.readyState === "loaded" || this.readyState === "complete") ) {
                    script.onload = script.onreadystatechange = null;
                    if ( head && script.parentNode ) {
                        head.removeChild( script );
                    }
                    loadNext();
                }
            };
    		head.appendChild(script);
		}else{
			// because we are loading the scripts via js, this resource
			window.define && define.resource('status.structure.loaded', true);
		}
	}
	loadNext();
})();




