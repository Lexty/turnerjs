describe("ViewerCaptureHandler", function(){
    testRequire().classes('wysiwyg.viewer.managers.viewer.ViewerCaptureHandler', 'mobile.core.components.base.BaseComponent');
    var asyncSpec =  new AsyncSpec(this);

    beforeEach(function(){
        this._handler = new this.ViewerCaptureHandler(W.Viewer);
    });

    describe("_getNodeHtml", function(){
        it("should add static_ prefix to all node ids", function(){
            var html = '<script type="text/javascript" id="1"></script><style id="2"></style><div id="3"></div><script id="4"></script><div id="5"></div>';
            var node = new Element("div");
            node.innerHTML = html;
            var expectedHtml = '<script type="text/javascript" id="static_1"></script><style id="static_2"></style><div id="static_3"></div><script id="static_4"></script><div id="static_5"></div>';
            var result = this._handler._getNodeHtml(node).replace(/\n/gi, '');
            expect(result).toMatch(expectedHtml);
        });

        it("should filter out generated by server child nodes", function(){
            var html = '<script type="text/javascript" id="1"></script><style id="2"></style><div id="3"></div><script id="4"></script><div id="5"></div>';
            var node = new Element("div");
            node.innerHTML = html;
            node.getElement("#3").serverGenerated = true;
            node.getElement("#1").serverGenerated = true;

            var expectedHtml = '<style id="static_2"></style><script id="static_4"></script><div id="static_5"></div>';
            var result = this._handler._getNodeHtml(node).replace(/\n/gi, '');
            expect(result).toMatch(expectedHtml);
        });
        it("should filter out generated by server child nodes if it has children", function(){
            var html = '<script type="text/javascript" id="1"></script><style id="2"></style>' +
                '<div id="3"><span></span><div></div></div>' +
                '<script id="4"></script>' +
                '<div id="5"><span></span><div></div></div>';
            var node = new Element("div");
            node.innerHTML = html;
            node.getElement("#3").serverGenerated = true;
            node.getElement("#1").serverGenerated = true;

            var expectedHtml = '<style id="static_2"></style><script id="static_4"></script><div id="static_5"><span></span><div></div></div>';
            var result = this._handler._getNodeHtml(node).replace(/\n/gi, '');
            expect(result).toMatch(expectedHtml);
        });
        it("should include generated by server components (wixads)", function(){
            var html = '<script type="text/javascript" id="1"></script><style id="2"></style><div id="3" comp="abc"></div><script id="4"></script><div id="5"></div>';
            var node = new Element("div");
            node.innerHTML = html;
            node.getElement("#3").serverGenerated = true;
            node.getElement("#1").serverGenerated = true;

            var expectedHtml = '<style id="static_2"></style><div id="static_3" comp="abc"></div><script id="static_4"></script><div id="static_5"></div>';
            var result = this._handler._getNodeHtml(node).replace(/\n/gi, '');
            expect(result).toMatch(expectedHtml);
        });

        describe("it should test the disposal functionality of obsolete components", function() {
            beforeEach(function() {
                var fakeComponent = new Element('div') ;
                fakeComponent.$logic = {dispose: function(){}} ;
                this._getNodeInDomCallCounter = 0 ;
                this._handler._getNodeInDom = function(id) {
                    this._getNodeInDomCallCounter += 1 ;
                    if(id) {
                        return fakeComponent ;
                    }
                }.bind(this) ;
            }) ;

            it("should not do anything in case passed ids are falsy, or ids array has falsy inputs", function() {
                this._handler._removeObsoleteComponents(null) ;
                this._handler._removeObsoleteComponents(undefined) ;
                this._handler._removeObsoleteComponents([]) ;
                this._handler._removeObsoleteComponents([undefined, null]) ;
                expect(this._getNodeInDomCallCounter).toBe(0) ;
            }) ;

            it("should dispose components with matching Ids that are obsolete(will never be 'ready')", function() {
                var idsToRemove     = ['footer', undefined, 'background', 'header'] ;
                this._handler._removeObsoleteComponents(idsToRemove) ;
                expect(this._getNodeInDomCallCounter).toBe(3) ;
            });
        }) ;
    });
});