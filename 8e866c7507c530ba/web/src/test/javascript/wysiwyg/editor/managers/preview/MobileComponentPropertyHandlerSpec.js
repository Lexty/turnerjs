/**
 * Created by Shaharz on 10/21/13.
 */
describe('MobileComponentPropertyHandler', function(){
    testRequire()
        .classes('wysiwyg.editor.managers.preview.MobileComponentPropertyHandler','core.managers.components.ComponentBuilder')
        .resources('W.ComponentData', 'W.Data', 'W.Preview');

    beforeEach(function(){
        this._mobileComptPropHandler = new this.MobileComponentPropertyHandler(this.W.ComponentData);
        this._mobileComponent = null;
    });

    describe("test splitMobileComponentProperties", function(){
        describe("in case that the mobile component is in componentsToModify map", function(){
            beforeEach(function(){
                createComponentToModifyComp.apply(this);
            });
            it("should set 'autoGenerated' meta tag to false", function(){

                this._mobileComptPropHandler.splitMobileComponentProperties(this._mobileComponent);

                expect(this._mobileCompProperties.getMeta('autoGenerated')).toBeEquivalentTo(false);
            });
        });

        describe("in case that the mobile component is not in componentsToModify map", function(){
            beforeEach(function(){
                createRegularComp.apply(this);
                this._newProps = W.Data.createDataItem({type: 'SpotifyPlayerProperties', id: 'mobile_regularCompPropsId', size: 'compact', color: 'black', style: 'list'});
                spyOn(this._mobileComptPropHandler, '_createMobileComponentProperties').andReturn(this._newProps);
            });

            it("should set the mobile component new properties", function(){
                this._mobileCompProperties =  this._newProps;

                this._mobileComptPropHandler.splitMobileComponentProperties(this._mobileComponent);

                expect(this._mobileComponent.getComponentProperties()).toBeEquivalentTo(this._mobileCompProperties);
            });

            it("should change the propertyQuery attribute in the mobile component view node according to the new properties id", function(){
                this._mobileCompProperties =  this._newProps;
                this._mobileComptPropHandler.splitMobileComponentProperties(this._mobileComponent);

                expect(this._mobileComponent.getViewNode().getProperty('propertyQuery')).toBe('#mobile_regularCompPropsId');
            });
        });
    });

    describe("test revertMobileComponentPropertiesToOriginalComponentProperties", function(){
        describe("in case that the mobile component is in componentsToModify map", function(){

            beforeEach(function(){
                createComponentToModifyComp.apply(this);
                this._mobileCompRawProperties = this._mobileCompProperties.getData();
                this._mobileCompRawProperties['iconSize'] = 20;
                spyOn(this._mobileComptPropHandler, '_generateMobileComponentRawProperties').andReturn(this._mobileCompRawProperties);
                spyOn(this._mobileComptPropHandler, '_setMobileComponentPropertiesAccordingToRawProperties');
            });

            it("should set properties according to desktop component and componentsToModify map", function(){
                this._mobileComptPropHandler.revertMobileComponentPropertiesToOriginalComponentProperties(this._mobileComponent);

                expect(this._mobileCompProperties.get('iconSize')).toBeEquivalentTo(20);
            });

            it("should set 'autoGenerated' meta tag to true", function(){
                this._mobileComptPropHandler.revertMobileComponentPropertiesToOriginalComponentProperties(this._mobileComponent);

                expect(this._mobileCompProperties.getMeta('autoGenerated')).toBeEquivalentTo(true);
            });
        });

        describe("in case that the mobile component is not in componentsToModify map", function(){
            beforeEach(function(){
                createRegularComp.apply(this);
                this._mobileCompProperties = W.Data.createDataItem({type: 'SpotifyPlayerProperties', id: 'mobile_regularCompPropsId', size: 'compact', color: 'black', style: 'list'});
            });

            it("should delete mobile component properties item", function(){
                this._mobileComponent.setComponentProperties(this._mobileCompProperties);
                spyOn(this._mobileComptPropHandler._componentDataManager, 'removeDataItem');
                spyOn(this._mobileComptPropHandler, '_getDesktopComponentProperties').andReturn(this._mobileComponent.getComponentProperties());

                this._mobileComptPropHandler.revertMobileComponentPropertiesToOriginalComponentProperties(this._mobileComponent);

                expect(this._mobileComptPropHandler._componentDataManager.getDataMap()[this._mobileCompProperties]).toBeUndefined()
            });

            it("should set the desktop component properties to the mobile component", function(){
                spyOn(this._mobileComptPropHandler, '_getDesktopComponentProperties').andReturn(this._mobileComponent.getComponentProperties());
                this._mobileComponent.setComponentProperties(this._mobileCompProperties);

                this._mobileComptPropHandler.revertMobileComponentPropertiesToOriginalComponentProperties(this._mobileComponent);

                expect(this._mobileComponent.getViewNode().getProperty('propertyQuery')).toBe('#regularCompPropsId');
            });
        });
    });

    describe("test isMobileComponentPropertiesSplitEnabled", function(){
        it ("should return false for component with editor meta data disablePropertySplit flag", function(){
            createNonSplittableComp.apply(this, [function(){
                expect(this._mobileComptPropHandler.isMobileComponentPropertiesSplitEnabled(this._mobileComponent)).toBeEquivalentTo(false);
            }.bind(this)]);
        });
        it ("should return true for component with no editor meta data mobile flags", function(){
            createRegularComp.apply(this, [function() {
                expect(this._mobileComptPropHandler.isMobileComponentPropertiesSplitEnabled(this._mobileComponent)).toBeEquivalentTo(true);
            }.bind(this)]);
        });
        it ("should return false for component with editor meta data allInputHidden flag", function(){
            createCompWithHiddenInputs.apply(this, [function() {
                expect(this._mobileComptPropHandler.isMobileComponentPropertiesSplitEnabled(this._mobileComponent)).toBeEquivalentTo(false);
            }.bind(this)]);
        });
    });

    describe("test areMobileComponentPropertiesSplitByUser", function(){
        describe("for component to modify that was not split by user", function(){
                beforeEach(function(){
                    createComponentToModifyComp.apply(this);
                });
                it("in case of new mobile component that is in componentsToModify map", function(){
                    this._mobileCompProperties.setMeta('autoGenerated', true);

                    var result = this._mobileComptPropHandler.areMobileComponentPropertiesSplitByUser(this._mobileComponent);

                    expect(result).toBeFalsy();
                });
                it("in case of existing mobile component is in componentsToModify map", function(){
                    var result = this._mobileComptPropHandler.areMobileComponentPropertiesSplitByUser(this._mobileComponent);

                    expect(result).toBeFalsy();
                });
            });
        describe("for 'normal' components that were split by user", function(){
                it("in case of new mobile component", function(){
                    createRegularComp.apply(this, function(){
                        this._mobileComptPropHandler.splitMobileComponentProperties(this._mobileComponent);

                        var result = this._mobileComptPropHandler.areMobileComponentPropertiesSplitByUser(this._mobileComponent);

                        expect(result).toBeTruthy();
                    }.bind(this));
                });
            });
    });

    describe("test isEnabled", function(){
        it ("should return false for component with editor meta data disablePropertySplit flag", function(){
            createNonSplittableComp.apply(this, [function(){
                expect(this._mobileComptPropHandler.isEnabled(this._mobileComponent)).toBeEquivalentTo(false);
            }.bind(this)]);
        });
        it ("should return true for component with no editor meta data mobile flags", function(){
            createRegularComp.apply(this, [function() {
                expect(this._mobileComptPropHandler.isEnabled(this._mobileComponent)).toBeEquivalentTo(true);
            }.bind(this)]);
        });
        it ("should return true for component with editor meta data allInputHidden flag", function(){
            createCompWithHiddenInputs.apply(this, [function() {
                expect(this._mobileComptPropHandler.isEnabled(this._mobileComponent)).toBeEquivalentTo(true);
            }.bind(this)]);
        });

    });

    describe("test areAllInputsHidden", function(){
        it ("should return false for component with editor meta data disablePropertySplit flag", function(){
            createNonSplittableComp.apply(this, [function(){
                expect(!!this._mobileComptPropHandler.areAllInputsHidden(this._mobileComponent)).toBeEquivalentTo(false);
            }.bind(this)]);
        });
        it ("should return false for component with no editor meta data mobile flags", function(){
            createRegularComp.apply(this, [function() {
                expect(!!this._mobileComptPropHandler.areAllInputsHidden(this._mobileComponent)).toBeEquivalentTo(false);
            }.bind(this)]);
        });
        it ("should return true for component with editor meta data allInputHidden flag", function(){
            createCompWithHiddenInputs.apply(this, [function() {
                expect(!!this._mobileComptPropHandler.areAllInputsHidden(this._mobileComponent)).toBeEquivalentTo(true);
            }.bind(this)]);
        });
    });

    describe("test arePropertiesSplit", function(){
        it("should return true for component to modify", function(){
            createComponentToModifyComp.apply(this, [function(){
                expect(!!this._mobileComptPropHandler.arePropertiesSplit(this._mobileComponent)).toBeEquivalentTo(true);
            }.bind(this)])
        });
        it("should return false for regular component", function(){
            createRegularComp.apply(this, [function(){
                expect(!!this._mobileComptPropHandler.arePropertiesSplit(this._mobileComponent)).toBeEquivalentTo(false);
            }.bind(this)])
        });
    });

    describe("test isComponentToModify", function(){
        it("should return true for component to modify", function(){
            createComponentToModifyComp.apply(this, [function(){
                expect(!!this._mobileComptPropHandler.isComponentToModify(this._mobileComponent)).toBeEquivalentTo(true);
            }.bind(this)])
        });
        it("should return false for regular component", function(){
            createRegularComp.apply(this, [function(){
                expect(!!this._mobileComptPropHandler.isComponentToModify(this._mobileComponent)).toBeEquivalentTo(false);
            }.bind(this)])
        });
    });

    describe("test shouldListenToDesktopComponentPropertiesChange", function(){
        it("should return true for component to modify", function(){
            createComponentToModifyComp.apply(this, [function(){
                expect(!!this._mobileComptPropHandler.shouldListenToDesktopComponentPropertiesChange(this._mobileComponent)).toBeEquivalentTo(true);
            }.bind(this)])
        });
        it("should return false for regular component whose properties were split", function(){
            spyOn(this.W.Preview, 'getCompLogicById').andReturn(this._mobileComponent);

            createRegularComp.apply(this, [function(){
                this._mobileComptPropHandler.splitMobileComponentProperties(this._mobileComponent);

                expect(!!this._mobileComptPropHandler.shouldListenToDesktopComponentPropertiesChange(this._mobileComponent)).toBeEquivalentTo(false);
            }.bind(this)])
        });
    });

    function createComponent(compType, compSkin, compRawData, compRawProps, callback){
        var that = this,
            builder = new this.ComponentBuilder(document.createElement('div'));

        this.mockData = W.Data.createDataItem(compRawData || {});
        this.mockProps = W.Data.createDataItem(compRawProps || {});

        builder
            .withType(compType)
            .withSkin(compSkin)
            .withData(this.mockData)
            .onWixified(function (component) {
                that._mobileComponent = component;
                that._mobileComponent.setComponentProperties(that.mockProps);
                that._mobileCompProperties = that.mockProps;
                if (callback) {
                    callback(this._mobileComponent);
                }
            })
            .create();
        waitsFor(function(){
            return that._mobileComponent !== null;
        }, 'Component to be ready',  1000);
    }

    function createRegularComp(callback) {
        createComponent.apply(this, [
            'wysiwyg.common.components.spotifyplayer.viewer.SpotifyPlayer',
            'wysiwyg.common.components.spotifyplayer.viewer.skins.SpotifyPlayerSkin',
            {type: 'SpotifyPlayer', uri: 'xxx'},
            {type: 'SpotifyPlayerProperties', id: 'regularCompPropsId', size: 'compact', color: 'black', style: 'list'},
            callback
        ]
        );
    }

    function createNonSplittableComp(callback) {
        createComponent.apply(this, [
            'wysiwyg.common.components.DeadComponent',
            'mock.viewer.skins.DeadCompMockSkin',
            null,
            null,
            callback
        ]);
    }

    function createCompWithHiddenInputs(callback) {
        createComponent.apply(this, [
            'wysiwyg.viewer.components.AudioPlayer',
            'mock.viewer.skins.AudioPlayerMockSkin',
            {type:'AudioPlayer', 'uri':"", 'autoPlay':false, 'loop':false, 'visible':true, 'volume':100, 'title':"", 'description':"", 'icon_uri':"", 'originalFileName':"" },
            null,
            callback
        ]);
    }

    function createComponentToModifyComp(callback) {
        createComponent.apply(this, [
            'wysiwyg.viewer.components.LinkBar',
            'mock.viewer.skins.LinkBarMockSkin',
            {type: 'ImageList', items: null},
            {type: 'LinkBarProperties', id: 'mobile_componentToModifyCompPropsId', galley: 'clipart', iconSize: 30, spacing: 5, bgScale: 1, orientation: 'HORIZ'},
            callback
        ]
        );
    }

});