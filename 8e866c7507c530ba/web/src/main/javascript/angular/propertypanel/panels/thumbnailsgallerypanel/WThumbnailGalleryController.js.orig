W.AngularManager.executeExperiment('NGPanels', function () {
    'use strict';

    angular.module('propertyPanel')
        .config(function (propertyPanelNavigationProvider) {
            propertyPanelNavigationProvider.registerPropertyPanel('tpa.viewer.components.Thumbnails', '/propertypanel/panels/thumbnailsgallerypanel/ThumbnailsGalleryPanel.html');
        })
        .controller("WThumbnailGalleryController", ThumbnailGalleryController);

<<<<<<< HEAD
    //@ngInject
    function ThumbnailGalleryController($scope, editorResources) {
=======
    function ThumbnailGalleryController($scope, editorResources, editorComponent) {
>>>>>>> 0f78fae003ba1beafeabed60cd7b77af31688d4a
        // TODO NMO 7/22/14 11:38 AM - When this panel will be merged into the master, the path below should probably change.
        var bgRelativeBase = "/images/wysiwyg/core/themes/editor_web/radiobuttons/";
        var buttonsUrl = editorResources.topology.skins + bgRelativeBase;
        this.thumbnailsProportionsButtonData = this.createThumbnailsProportionsButtonGroupData(buttonsUrl);

        this.alignmentButtonsData = this.createAlignmentButtonGroupData(buttonsUrl);

        var styleData   = editorComponent.getEditedComponent().getStyle();

        this.titleColor         = this._createColorDirectiveData(styleData, "color1") ;
        this.descriptionColor   = this._createColorDirectiveData(styleData, "color2") ;
        this.bgColor            = this._createColorDirectiveData(styleData, "color3") ;
    }

    var proto = ThumbnailGalleryController.prototype;

    proto._createColorDirectiveData = function(styleData, propertyName) {
        return {
            "styleData":      styleData,
            "propertyName":   propertyName
        } ;
    };

    proto.imageScalingOptions = [
        {"value": "crop", "label": "Types.WPhotoProperties.displayMode.fill"},
        {"value": "fit", "label": "Types.WPhotoProperties.displayMode.fitWidth"}
    ];

    proto.transitionOptions = [
        {"label": "None", "value": "none"},
        {"label": "Cross Fade", "value": "crossFade"},
        {"label": "Slide horizontal", "value": "slide"},
        {"label": "Slide vertical", "value": "scroll"},
        {"label": "Zoom", "value": "zoom"},
        {"label": "Random", "value": "random"}
    ];


    proto.thumbnailsPositionOptions = [
        {"label": "Top", "value": "top"},
        {"label": "Bottom", "value": "bottom"},
        {"label": "Left", "value": "left"},
        {"label": "Right", "value": "right"}
    ];


    proto.onImageClickedOptions = [
        {"label": "Types.MatrixGalleryProperties.galleryImageOnClickAction.disabled", "value": "disabled"},
        {"label": "Types.MatrixGalleryProperties.galleryImageOnClickAction.goToLink", "value": "goToLink"},
        {"label": "Types.MatrixGalleryProperties.galleryImageOnClickAction.zoomMode", "value": "zoomMode"}
    ];


    proto.fontOptions = [
        {"label": "System.font.arial", "value": "arial"},
        {"label": "System.font.arialBlack", "value": "arialBlack"},
        {"label": "System.font.comicSansMS", "value": "comicSansMS"},
        {"label": "System.font.courierNew", "value": "courierNew"},
        {"label": "System.font.georgia", "value": "georgia"},
        {"label": "System.font.impact", "value": "impact"},
        {"label": "System.font.lucidaConsole", "value": "lucidaConsole"},
        {"label": "System.font.lucidaSansConsole", "value": "lucidaSansConsole"},
        {"label": "System.font.palatinoLinotype", "value": "palatinoLinotype"},
        {"label": "System.font.tahoma", "value": "tahoma"},
        {"label": "System.font.timesNewRoman", "value": "timesNewRoman"},
        {"label": "System.font.verdana", "value": "verdana"}
    ];


    proto.textModeOptions = [
        {"label": "System.textMode.titleAndDescription", "value": "titleAndDescription"},
        {"label": "System.textMode.titleOnly", "value": "titleOnly"},
        {"label": "System.textMode.descriptionOnly", "value": "descriptionOnly"},
        {"label": "System.textMode.noText", "value": "noText"}
    ];


    proto.createBgImagesForRadioButtons = function (buttonsUrl, uncheckedYPos, checkedYPos, onHoverYPos) {
        var buttonsBgUrl = buttonsUrl + "radio_button_states.png";
        buttonsBgUrl = "'" + buttonsBgUrl + "'";

        return {
            unchecked: "url(" + buttonsBgUrl + ") 0px " + uncheckedYPos + " no-repeat",
            checked: "url(" + buttonsBgUrl + ") 0px " + checkedYPos + " no-repeat",
            onHover: "url(" + buttonsBgUrl + ") 0px " + onHoverYPos + " no-repeat"
        };
    };

    proto.setImgToBgImages = function (buttonsUrl, images, imgName) {
        var imgPath = "'" + buttonsUrl + imgName + "'";
        images.unchecked = "url(" + imgPath + ")" + "," + images.unchecked;
        images.checked = "url(" + imgPath + ")" + "," + images.checked;
        images.onHover = "url(" + imgPath + ")" + "," + images.onHover;
    };

    proto.createThumbnailsProportionsButtonGroupData = function (buttonsUrl) {
        var imagesCss = this.createBgImagesForRadioButtons(buttonsUrl + "aspRatio/", "0px", "-103px", "-50px");
        var images169 = _.cloneDeep(imagesCss);
        this.setImgToBgImages(buttonsUrl, images169, "aspRatio/16-9.png");
        var images43 = _.cloneDeep(imagesCss);
        this.setImgToBgImages(buttonsUrl, images43, "aspRatio/4-3.png");
        var images11 = _.cloneDeep(imagesCss);
        this.setImgToBgImages(buttonsUrl, images11, "aspRatio/1-1.png");

        return [
            {"imageCss": images169, "value": "16:9"},
            {"imageCss": images43, "value": "4:3"},
            {"imageCss": images11, "value": "1:1"}
        ];
    };

    proto.createAlignmentButtonGroupData = function (buttonsUrl) {
        var radioButtonsBgs = this.createBgImagesForRadioButtons(buttonsUrl, "0px", "-66px", "-33px");
        var leftAlign = _.cloneDeep(radioButtonsBgs);
        var centerAlign = _.cloneDeep(radioButtonsBgs);
        var rightAlign = _.cloneDeep(radioButtonsBgs);

        this.setImgToBgImages(buttonsUrl, leftAlign, "alignment/left.png");
        this.setImgToBgImages(buttonsUrl, centerAlign, "alignment/center.png");
        this.setImgToBgImages(buttonsUrl, rightAlign, "alignment/right.png");

        return [
            {"imageCss": leftAlign, "value": "left"},
            {"imageCss": centerAlign, "value": "center"},
            {"imageCss": rightAlign, "value": "right"}
        ];
    };

});
