// Generated by desperado 
/** @class wysiwyg.editor.commandregistrars.EditCommandRegistrar */
define.experiment.Class('wysiwyg.editor.commandregistrars.EditCommandRegistrar.AppBuilderDeleteType.New', function (def, strategy) {
	def.methods({
		registerCommands: strategy.around(function (originalFn) {
            originalFn();
            this.resources.W.Commands.registerCommandAndListener("WEditorCommands.CommandRegistrarRegisterPlugin", this, this.registerPlugin);
        }),
		_clipboardActionsRestrictedNotification: function(){
            // TODO: This image is a placeholder! Please replace
            var icon = {x: 0, y: 0, width: 59, height: 58, url: 'icons/no_copy_msg.png'};

            // TODO: No help screen id available
            var helpId = null;

            W.EditorDialogs.openNotificationDialog("RestrictClipBoardActions", "COPY_PASTE_MOBILE_RESTRICT_NOTIF_TITLE", "COPY_PASTE_MOBILE_RESTRICT_NOTIF_BODY", 440, 80, icon, true, helpId, 1);
        },
		_confirmAndDeleteSelectedComponent: function(){
            var editedComponent = W.Editor.getEditedComponent();
            if (!W.Editor.canDeleteSelectedComponent()) {
                return;
            }
            var self = this;

            //before delete plugin (if exists)
            var pluginHook = this.getPluginMethod(editedComponent, "onBeforeDelete");
            if (pluginHook) {
                pluginHook(editedComponent, function(){
                    self._continueDeleteFlow(editedComponent);
                });
            }
            else {
                //continue sync delete flow only if there is no pluggin on the comp
                this._continueDeleteFlow(editedComponent);
            }
        },
		_continueDeleteFlow: function(editedComponent){
            W.Editor.doDeleteSelectedComponent();
            this._reportDeleteBIEvent(editedComponent);
        },
		_reportDeleteBIEvent: function (editedComponent) {
            var compsToReportArr = [];
            var self = this;
            if (editedComponent.isMultiSelect) {
                compsToReportArr = editedComponent.getSelectedComps();
            } else if (editedComponent.IS_CONTAINER) {
                compsToReportArr = editedComponent.getDescendantComponentsRecurse(editedComponent, compsToReportArr);
            }

            compsToReportArr.push(editedComponent);

            compsToReportArr.forEach(function(comp) {
                var params = {c1: comp.className};
                var event = self._determineBiEventType(comp);

                if (!!comp.getComponentId) {
                    params.i1 = comp.getComponentId();
                }
                if(comp.isAppPart) {
                    var partDef = comp.getPartDef();
                    params.c2 = partDef && partDef.id;
                }
                if(comp.isAppPart2){

                }
                if(comp.isTpa){
                    var appData = comp.getAppData();
                    params.c1 = appData.appDefinitionName;
                    params.g1 = appData.appDefinitionId;
                    if (appData && appData.demoMode) {
                        params.i2 = 'template-app';
                    }
                }

                LOG.reportEvent(event, params);
            });
        },
		_determineBiEventType: function(comp){
            if(this.resources.W.Config.env.isViewingSecondaryDevice()){
                return wixEvents.MOBILE_EDITOR_HIDE_COMPONENT;
            } else if (comp.isTpa) {
                return wixEvents.APPS_FLOW_APP_REMOVED_FROM_STAGE;
            } else {
                return wixEvents.COMPONENT_REMOVED;
            }
        },
		registerPlugin: function(params) {
            this._plugins = this._plugins || {};
            this._plugins[params.componentClassName] = params.pluginMethods;
        },
		getPluginMethod: function(editedComponent, methodName) {
            var compWithPlugin = this._getCompPluginFromContainer(editedComponent);
            if(this._plugins[compWithPlugin.className]){
                return this._plugins[compWithPlugin.className][methodName];
            }
            return null;
        },
		_getCompPluginFromContainer: function(editedComponent){
            var compsArr = [];
            var tpaComps;
            var wixAppsComps;

            if (editedComponent.isMultiSelect) {
                compsArr = editedComponent.getSelectedComps();
            } else if (editedComponent.IS_CONTAINER) {
                compsArr = editedComponent.getDescendantComponentsRecurse(editedComponent, compsArr);
            }

            tpaComps = _.filter(compsArr, function(comp){
                return comp.isTpa && comp.isPremiumApp();
            });

            if(tpaComps && tpaComps.length){
                return tpaComps[0];
            }

            wixAppsComps = _.filter(compsArr, function(comp){
                return comp.isAppPart || comp.isAppPart2;
            });

            if(wixAppsComps && wixAppsComps.length){
                return wixAppsComps[0];
            }

            return editedComponent;
        }
	});

});