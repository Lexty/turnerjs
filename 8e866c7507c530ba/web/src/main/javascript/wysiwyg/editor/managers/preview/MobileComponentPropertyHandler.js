define.Class('wysiwyg.editor.managers.preview.MobileComponentPropertyHandler', function (classDefinition) {

    /**@type bootstrap.managers.classmanager.ClassDefinition */
    var def = classDefinition;

    def.resources(['W.Preview']);

    def.utilize(['wysiwyg.editor.managers.preview.MobileComponentsToModify']);

    def.methods({

        initialize: function (componentDataManager) {
            this._componentDataManager = componentDataManager;
            this._mobileComponentsToModify = new this.imports.MobileComponentsToModify();
            this._componentsToModify = this._mobileComponentsToModify.getComponentsToModifyMap();
        },

        splitMobileComponentProperties: function(component, rawProperties) {
            var mobileCompProperties, originalCompProperties = component.getComponentProperties();

            if (this.isComponentToModify(component)) {
                mobileCompProperties = originalCompProperties;
                if (rawProperties) {
                    this._setMobileComponentPropertiesAccordingToRawProperties(component, rawProperties);
                }
                mobileCompProperties.setMeta('autoGenerated', false);
            }
            else {
                var mobileCompRawProperties = rawProperties || Object.clone(originalCompProperties.getData());
                mobileCompProperties = this._createMobileComponentProperties(component, mobileCompRawProperties);
                component.setComponentProperties(mobileCompProperties);
                component.getViewNode().setProperty('propertyQuery', '#' + mobileCompProperties.get('id'));
            }
        },

        revertMobileComponentPropertiesToOriginalComponentProperties: function(mobileComponent){
            var propertiesToUpdateMap = this._componentsToModify[mobileComponent.$className];
            if (!!propertiesToUpdateMap) {
                var mobileCompProperties = mobileComponent.getComponentProperties();
                var mobileCompRawProperties = this._generateMobileComponentRawProperties(mobileCompProperties, propertiesToUpdateMap);
                this._setMobileComponentPropertiesAccordingToRawProperties(mobileComponent, mobileCompRawProperties);
                mobileCompProperties.setMeta('autoGenerated', true);
            }
            else {
                this._removeCurrentMobileComponentProperties(mobileComponent);
                this._setDesktopComponentProperties(mobileComponent);
            }
        },

        isMobileComponentPropertiesSplitEnabled: function(mobileComponent) {
            return this.isEnabled(mobileComponent) && !this.areAllInputsHidden(mobileComponent);
        },

        areMobileComponentPropertiesSplitByUser: function(mobileComponent) {
            if (!this.arePropertiesSplit(mobileComponent)) {
                return false;
            }
            this._addAutoGeneratedFlagIfNeeded(mobileComponent);
            return !mobileComponent.getComponentProperties().getMeta('autoGenerated');
        },

        isEnabled: function(mobileComponent) {
            return !(mobileComponent.EDITOR_META_DATA.mobile && mobileComponent.EDITOR_META_DATA.mobile.disablePropertySplit);
        },

        areAllInputsHidden: function(mobileComponent) {
            return mobileComponent.EDITOR_META_DATA.mobile && mobileComponent.EDITOR_META_DATA.mobile.allInputsHidden;
        },

        arePropertiesSplit: function(mobileComponent){
            var componentProperties = mobileComponent.getComponentProperties();
            return  componentProperties && componentProperties.get('id').contains(Constants.ViewerTypesParams.DOM_ID_PREFIX.MOBILE);
        },

        isComponentToModify: function(component) {
            return !!this.getComponentToModifyPropsToUpdate(component);
        },

        getComponentToModifyPropsToUpdate: function(component) {
            return this._componentsToModify[component.$className];
        },

        shouldListenToDesktopComponentPropertiesChange: function(mobileComponent) {
            var isPropertiesSplitEnabled = this.isMobileComponentPropertiesSplitEnabled(mobileComponent);
            return isPropertiesSplitEnabled && !this.areMobileComponentPropertiesSplitByUser(mobileComponent);
        },

        _createMobileComponentProperties: function(component, mobileComponentRawProperties) {
            var compPropId = Constants.ViewerTypesParams.DOM_ID_PREFIX.MOBILE + mobileComponentRawProperties.id.replace(Constants.ViewerTypesParams.DOM_ID_PREFIX.MOBILE, '');
            var newProperties = this._componentDataManager.addDataItem(compPropId, mobileComponentRawProperties);
            newProperties.setIsPersistent(true);
            return newProperties;
        },

        _generateMobileComponentRawProperties: function(mobileCompProperties, propertiesToUpdateMap) {
            var desktopCompProperties = this._getDesktopComponentProperties(mobileCompProperties);
            var mobileCompRawProperties = Object.clone(desktopCompProperties.getData());
            mobileCompRawProperties.id = Constants.ViewerTypesParams.DOM_ID_PREFIX.MOBILE + mobileCompRawProperties.id;
            this._updateRawPropertiesAccordingToPropertiesToUpdateMap(mobileCompRawProperties, propertiesToUpdateMap);
            return mobileCompRawProperties;
        },

        _getDesktopComponentProperties: function(mobileComponentProperties) {
            var desktopPropertiesId = mobileComponentProperties.get('id').replace(Constants.ViewerTypesParams.DOM_ID_PREFIX.MOBILE, '');
            var propertiesManager = this.resources.W.Preview.getPreviewManagers().ComponentData;
            return propertiesManager.getDataByQuery('#' + desktopPropertiesId);
        },

        _updateRawPropertiesAccordingToPropertiesToUpdateMap: function(mobileComponentRawProperties, propertiesToUpdateMap) {
            _.forEach(propertiesToUpdateMap, function (getPropFunction, propertyName) {
                var getPropFunction = propertiesToUpdateMap[propertyName];
                mobileComponentRawProperties[propertyName] = getPropFunction(mobileComponentRawProperties[propertyName]);
            });
        },

        _setMobileComponentPropertiesAccordingToRawProperties: function(mobileComponent, mobileCompRawProperties){
            var currentComponentProperties = mobileComponent.getComponentProperties();
            _.forEach(mobileCompRawProperties, function(propValue, propKey) {
                currentComponentProperties.set(propKey, propValue);
            });
        },

        _removeCurrentMobileComponentProperties: function(mobileComponent) {
            var mobileComponentProperties = mobileComponent.getComponentProperties();
            mobileComponentProperties.componentsWithInterest = [];
            this._componentDataManager.removeDataItem(mobileComponentProperties);
        },

        _setDesktopComponentProperties: function(mobileComponent) {
            var desktopComponentProperties = this._getDesktopComponentProperties(mobileComponent.getComponentProperties());
            mobileComponent.setComponentProperties(desktopComponentProperties);
            mobileComponent.getViewNode().setProperty('propertyQuery', '#' + desktopComponentProperties.get('id'));
        },

        //this method's purpose is to add the 'autoGenerated' meta data to properties that were converted to mobile before MobileComponentProperties experiment was opened
        _addAutoGeneratedFlagIfNeeded: function(mobileComponent) {
            var mobileComponentProperties = mobileComponent.getComponentProperties();
            var propertiesMetaData = mobileComponentProperties.get('metaData');
            //getMeta function returns false in case the value is undefined, and that's why I don't use it
            var arePropsAutoGenerated = propertiesMetaData && propertiesMetaData['autoGenerated'];

            if (arePropsAutoGenerated === undefined && this.isComponentToModify(mobileComponent)) {
                mobileComponentProperties.setMeta('autoGenerated', true);
            }
        }
    });
});