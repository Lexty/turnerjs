define.Class('wysiwyg.editor.layoutalgorithms.MultiLayoutComponentPropertyHandler', function (classDefinition) {

    /**@type bootstrap.managers.classmanager.ClassDefinition */
    var def = classDefinition;

    def.utilize(['wysiwyg.editor.managers.preview.MobileComponentsToModify']);

    def.methods({

        initialize: function (managers, modules) {
            this._viewerManagers = managers;
            this._mobileComponentsToModify = new this.imports.MobileComponentsToModify();
            this._utils = modules.$utils;
            this._componentsToModify = this._mobileComponentsToModify.getComponentsToModifyMap();
        },

        modifyComponentProperties: function (component) {
            var propertyQuery = component.propertyQuery;
            if (!propertyQuery) {
                return;
            }

            var componentType = component.componentType;
            if (!this._componentsToModify[componentType]) {
                return;
            }

            var mobileComponentProperties = this._viewerManagers.ComponentData.getDataByQuery('#mobile_' + propertyQuery);
            if (mobileComponentProperties) {
                return;
            }
            this._viewerManagers.ComponentData.getDataByQuery('#' + propertyQuery, function(componentData){
                this._createComponentProps(component, componentData);
            }.bind(this));
        },

        _createComponentProps: function(component, componentData){
            var compRawProp = Object.clone(componentData.getData());
            var compPropId = Constants.ViewerTypesParams.DOM_ID_PREFIX.MOBILE + compRawProp.id;
            var componentType = component.componentType;
            var propsToUpdate = this._componentsToModify[componentType];
            _.forEach(propsToUpdate, function (getPropFunction, prop) {
                var newValue = getPropFunction(componentData.get(prop));
                compRawProp[prop] = newValue;
            });

            var newProps = this._viewerManagers.ComponentData.addDataItem(compPropId, compRawProp);
            component.propertyQuery = compPropId;

            newProps.addComponentWithInterest(W.Preview.getCompLogicById(component.id));
            if (propsToUpdate) {
                newProps.setMeta('autoGenerated', true);
            }
        },

        updateComponentProperties: function (webComponent, mobileStructure) {
            var propertyQuery = webComponent.propertyQuery;
            var componentType = webComponent.componentType;

            if (!propertyQuery || !this._componentsToModify[componentType]) {
                this._handleComponentChildrenProperties(webComponent, mobileStructure);
                return;
            }

            var desktopCompProperties = this._viewerManagers.ComponentData.getDataByQuery('#' + propertyQuery);
            var mobileCompPropertyQuery = Constants.ViewerTypesParams.DOM_ID_PREFIX.MOBILE + propertyQuery;
            var mobileCompProperties = this._viewerManagers.ComponentData.getDataByQuery('#' + mobileCompPropertyQuery);
            var mobileComponent = this._utils.getComponentByIdFromStructure(webComponent.id, mobileStructure);
            if(!mobileComponent){
                this._handleComponentChildrenProperties(webComponent, mobileStructure);
                return;
            }
            if(!mobileCompProperties){
                this._createComponentProps(mobileComponent, desktopCompProperties);
            }else{
                var actualPropertyQuery = mobileComponent.propertyQuery;
                if(actualPropertyQuery !== mobileCompPropertyQuery){
                    mobileComponent.propertyQuery = mobileCompPropertyQuery;
                }
                var propsToUpdate = _.keys(desktopCompProperties.getSchema());
                var propsToModify = this._componentsToModify[componentType];
                _.forEach(propsToUpdate, function (prop) {
                    var newValue;
                    if (mobileCompProperties.getMeta('autoGenerated')){
                        if(propsToModify[prop]){
                            var modificationFuc = propsToModify[prop];
                            newValue = modificationFuc(desktopCompProperties.get(prop));
                        }
                        else {
                            newValue = desktopCompProperties.get(prop);
                        }
                    }
                    else {
                        newValue = mobileCompProperties.get(prop);
                    }
                    if (mobileCompProperties.get(prop) !== newValue) {
                        mobileCompProperties.set(prop, newValue);
                    }
                });
            }

            this._handleComponentChildrenProperties(webComponent, mobileStructure);

        },

        _handleMissingCompProps: function(webComp, mobComp) {
            if((mobComp && !mobComp.propertyQuery) && (webComp && webComp.propertyQuery)) {
                mobComp.propertyQuery = webComp.propertyQuery;
            }
        },

        _handleComponentChildrenProperties:function(component, mobileStructure){
            var children = component.components || component.children;
            if(!children){
                return;
            }
            for(var i=0; i<children.length; i++){
                var currentChild = children[i];
                this.updateComponentProperties(currentChild, mobileStructure);
            }
        }
    });

});

//