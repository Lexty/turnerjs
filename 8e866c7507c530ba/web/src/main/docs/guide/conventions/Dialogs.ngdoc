@doc overview
@id Dialogs
@name Dialogs
@description

_Creating ngEditor Dialogs In a Post-Apocalyptic Code Environment_

## Overview

Dialogs are created by `dialogService` and managed by the `dialogWindows` service.

A dialog's view is an instance of the <dialog-window> directive, which uses pre-defined building blocks for the different dialog parts
(titlebar, description, content, footer, buttons, etc.).
These building block all have different customizations available, and the dialog-window itself can be completely customized by overriding its template when a completely custom dialog is required.

Creating a dialog is easy, and it's free!

## Creating a Dialog
```javascript
dialogService.open(dlgTypeId, options);
```

### Arguments

* `{string} dlgTypeId` - an identifier of the dialog type. Only one instance of a type is allowed
* `{DialogOptions} options` - is an object containing the dialog's specific settings.


### Dialog Options

* `{?string} title` - the dialog's title
* `{?string} helpId` - help button help id (if not set, the help `(?)` button won't be displayed)
* `{?string} descriptionText` - The dialog's description
* `{?string} helplet` - The dialog's Learn More link's ID (if not set, the learn more link won't be displayed)
* `{?$sce.TrustedResource} descriptionTemplateUrl` - Replaces the default description & learn more link template
* `{?DialogButton[]} buttonsSet` - Buttons to be displayed at the bottom of the dialog window (if not sent, no buttons are displayed)
* `{?string} position` - Dialog window's position type (dialogService.CONSTS.POSITION enum) (default: absolute)
* `{?number} positionLeft`
* `{?number} positionTop`
* `{?number} level` - used with position = dialogService.CONSTS.POSITION.SIDE
* `{?$sce.TrustedResource} contentUrl` - main content to be displayed in the dialog
* `{?$sce.TrustedResource} footerUrl` - footer to be displayed below the content
* `{?string} modalType` - type of modal dialogService.CONSTS.TYPES
* `{?boolean} backdrop` - false for no backdrop, true for backdrop, 'static' for backdrop that doesn't close the dialog on external click
* `{?number} width` - the dialog window's width
* `{?number} height` - the dialog window's height
* `{?Object} context` - will be mounted on the dialog's scope as scope.context, can contain data\methods\what not (see {@link guide/Dialogs#dialoginnerscope Dialog's Inner Scope} for more)
* `{?boolean} draggable` - allows dragging the dialog, adds a drag cursor to the dragHandleClass element
* `{?string} dragHandleClass` - used with draggable=true, this is the class that will trigger the dialog's dragging (default = 'wix-dialog-titlebar')
* `{?function} onCloseCallback` - called when the dialog is closing, before the element is removed from the DOM

### Examples

The following is an example of a prompt dialog:

 * It contains a title, description and OK and Cancel buttons
 * It is modal
 * It is located in the center of the screen
 * Clicking the backdrop will not close the dialog - only the `(x)` or the buttons will close it.

```html

// MyPanelView.html

< div ng-controller="MyPanelController as myPanelController">
    < wix-button label="Open Message Dialog" click-handler="myPanelController.openPromptDialog()">
    < /wix-button>
< /div>
```

```javascript

// MyPanelController.js

this.openPromptDialog = function() {
    dialogService.open('promptDialog', {
        title: 'Prompt Dialog',
        descriptionText: 'Do you approve this dialog?',
        backdrop: 'static',
        position: dialogService.CONSTS.POSITION.CENTER,
        buttonsSet: dialogService.CONSTS.BUTTONS_SET.OK_CANCEL,
        onCloseCallback: function(param) {
            if (param.result === true) {
                // OK clicked
            } else {
                // Cancel or X clicked
            }
        }
    });
};
```

Resulting dialog:

![Modal Prompt Dialog](/resources/img/dialogs_img01_message_dialog.png)

A more advanced example is the following dialog:

* It has a help ID and a "learn More" link
* It has a content view
* It is a semi modal
* It has no back drop, and clicking outside of the dialog will cause it to close
* It's draggable
* It's position is absolute
* It's closing behavior differs according to the closing reason (clicking outside of the dialog is treated as a confirmation)
* It returns data to the close callback using the context object

```html

// dialogs/userinfo/UserInfoDialogView.html

< wix-input label="Enter your name" wix-data="context.name">< /wix-input>
< wix-input label="Enter your alter-ego's name" wix-data="context.alterEgoName">< /wix-input>

// MyPanelView.html

< div ng-controller="MyPanelController as myPanelController">
    < wix-button label="Get User Info" click-handler="myPanelController.openUserInfoDialog()">
    < /wix-button>
< /div>
```

```javascript

// MyPanelController.js

this.openUserInfoDialog = function() {
    dialogService.open('userInfoDialog', {
        title: 'User Info',
        helpId: '/node/12345',
        descriptionText: 'Enter your details below',
        helplet: 'USER_INFO_DIALOG',
        contentUrl: editorResources.getAngularPartialPath('dialogs/userinfo/UserInfoDialogView.html'),
        modalType: dialogService.CONSTS.TYPES.SEMI_MODAL,
        draggable: true,
        position: dialogService.CONSTS.POSITION.ABSOLUTE,
        positionLeft: 100,
        positionTop: 70,
        buttonsSet: dialogService.CONSTS.BUTTONS_SET.OK,
        onCloseCallback: function(params) {
            if (params.closeReason === dialogService.CONSTS.CLOSING_REASON.DISMISS || // x button
                params.closeReason === dialogService.CONSTS.CLOSING_REASON.CANCEL) { // cancel button

                // Do something. Send BI.
            } else {
                console.log('User Name:', params.context.name, '\nAlter Ego Name:', params.context.alterEgoName);
            }
        }
    });
};
```

Resulting dialog:

![User Info Dialog](/resources/img/dialogs_img02_userInfoDialog1.png)

And when confirming the dialog (either by clicking OK or anywhere outside the dialog):

![User Info Dialog Result](/resources/img/dialogs_img03_userInfoDialog2.png)

## Dialog Inner Scope

The dialog needs a scope in order for it to function:

* It has to interact with its view - display values (title, helpId, etc.), respond to user interactons (clicking the close button), etc.
* It has to provide an inner API for the dialog's content (e.g. dialog.close - see below)
* And it needs to allow the developer that's using the dialog to work like they would have in any other angular environment - with a scope.

To accomplish that, the dialog is created with a new scope ($rootScope descendant).
This scope is owned by the dialog - and not meant for the dialog content's developer to directly interact with.


### scope.dialog

In this inner scope, a `dialog` object is defined (`scope.dialog`), which exposes an inner dialog API for the developer.
The API includes:

* `dialog.close(result, closeReason)` - closes the dialog
* `dialog.setTitle(sTitle)` - set the title in the titlebar
* `dialog.setDescription(sDesc)` - set the dialog's description
* `dialog.setHelpId(sHelpId)` - set the help ID for the help `(?)` button

### scope.context

As previously mentioned, the scope inside the dialog is owned by the dialog, not by the developer using it.

So what do I do? How do I pass data into the dialog? How do I receive data back? How do I respond to data changes?

Along comes the `context` object. This object is passed in the dialog's options object, but is then mounted into the scope, and can be used in the dialog content's view (e.g. `context.myData`), and - if you've defined one - in the dialog content's controller (as `$scope.context.myData`).
The `context` object is also returned in the dialog's close callback, although you can keep the reference when you open the dialog (e.g. from a service), and interact with the dialog while it's still open.

### scope._options

This object is the original options that were passed in the dialogService.open, after having been processed and extended by the dialog infra.
This object private (noticed the underscore?), and used only by the dialogs infra for super duper secret dialog stuff.


