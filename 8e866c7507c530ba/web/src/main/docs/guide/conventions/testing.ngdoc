@doc overview
@id testing
@name Testing
@description

#Writing unitests for angular

###General Stuff

To run tests, install karma

Spec files should end with 'SpecNG' suffix, to prevent them from running in testicle, and allow them to run in Karma.

####Files path
Spec files path should be the same as the tested file, with 'main' replaced by 'test'

For example, the spec for
  > 'html-client\web\src\main\javascript\angular\propertypanel\PropertyPanelController.js'

Should be
 > 'html-client\web\src\test\javascript\angular\propertypanel\PropertyPanelControllerSpecNG.js'

####General mocks
The mocks for W objects are in *w-mocks.js* file. Angular mocks are in *angular-mocks.js*

Mocks for our own services are created in *WixAngularTestsUtils.js*. You can override them in your spec, as explained later in this doc.

####**Writing a unit test**
Before you can test something you need to load it's module -

    beforeEach(module('utils'));

To mock specific services in your test, you need to call the **$provide** service and use it to define your mock.

You can use a mock service from the general mocks file -

    beforeEach(module(function ($provide) {
            $provide.factory('editorResources', TestsUtils.mocks.editorResources);
        }));

Or you can create your own -

    var editorResourcesMock = function ($sce) {
            return {
                getAngularPartialPath: function (str) {
                    return $sce.trustAsResourceUrl('angular' + str.toLowerCase());
                }
            };
        }
     beforeEach(module(function ($provide) {
         $provide.factory('editorResources', editorResourcesMock);
     }));

You can use the **inject** global to get references to angular services in your test like this -

     beforeEach(inject(function ($window) {
        spyOn($window).getComputedStyle;
    }));

####**Testing a service**
To test a service, you need angular to create that service and provide a reference for it.

This is done with the *inject* service. The service should be declared as an argument to a function, surrounded by _ ,
so you can create a local variable in your spec with the service name, without collisions.

    beforeEach(inject(function (_mathUtils_) {
            mathUtils = _mathUtils_;
        }));

####**Testing a directive**
To get angular to create the directive, the **$compile** service is needed.
$compile gets an HTML template as an argument. Angular compiles the html and returns the directive link function, that should be called with a scope object.

The passed scope will be the containing scope of the created directive.

The final return value is the compiled angular element (jQlite or jQuery)

after compiling the directive, a *digest* cycle should be initiated.

    beforeEach(inject(function ($compile) {
        elm = $compile('<wix-slider wix-data="5" label="SLIDESHOW_GALLERY_INTERVAL" ></wix-slider>')(scope);
        scope.$digest();
    }));

Creating a scope object can be done like this -

    beforeEach(inject(function ($rootScope) {
        rootScope = $rootScope;
        scope = $rootScope.$new();
    }));

If the directive has an **isolated scope**, it can be used with -

    var directiveScope = elm.isolateScope();

**$compile can also get an angular element**. This is very useful when mocking native javascript properties/functions
on the html element **before compiling your directive**. example -

    var mockInnerElement = { }
    var html = '<div wix-fit-content-to-window><p></p></div>';
    var tempElm = angular.element(html);
    spyOn(tempElm[0], 'getElementsByClassName').andReturn([mockContentElement]);
    elm = $compile(tempElm)(scope);

####**Testing a controller**

To create the controller in your test you need the **$controller** service. $conroller is called with the required
controller name, and an object containing the controller dependencies. The returned object is the controller instance.

    beforeEach(inject(function ($controller, $rootScope, $timeout, $window, configManager, editorCommands, editorComponent, editorResources, propertyPanelNavigation) {
        scope = $rootScope.$new();
        rootScope = $rootScope;

        ctrl = $controller('PropertyPanelController', {
            $scope: scope,
            $element: angular.element(element),
            $rootScope : $rootScope,
            configManager: configManager,
            editorCommands: editorCommands,
            editorComponent: editorComponent,
            editorResources: editorResources,
            propertyPanelNavigation: propertyPanelNavigation
        });
    }));

