@charset "UTF-8";

@import 'VerticalMenuBaseSkin';

// ***************************************************************************************************************************************
// NOTE: *DO NOT* change the param names on existing skins (e.g. brd, shd, bg, etc) - the first argument passed to the param() functions. 
// these are saved in the site's data, changing them will break the site.
// you may give skin params any name you wish - but only in new components and their (new) skins.
// ***************************************************************************************************************************************
$font: font_1;
$sub-menu-font: font_1;

$text-color: color_15;
$hover-text-color: color_13;
$selected-text-color: color_13;

$background-color: color_11;
$sub-menu-background-color: color_11;

$hover-border-color: color_15;
$selected-border-color: color_15;

$border-radius: 0;
$sub-menu-border-radius: 0;

$sub-menu-margin: 1px;
$text-spacing: 10px;
$box-shadow: 0 1px 4px rgba(0, 0, 0, .6);
$item-background-color-transition: background-color .4s ease 0s;
$sub-menu-opacity-transition: all .4s ease 0s;

@include define-mapped-param(rdTop, rd);
@include define-mapped-param(rdBottom, rd);
@include define-mapped-param(dropDownRdTop, SKINS_submenuBR);
@include define-mapped-param(dropDownRdBottom, SKINS_submenuBR);

#menuContainer {
  padding: 0;
  margin: 0;
  position: relative;
  @include param-box-shadow(shd, $box-shadow);
  @include param-border-radius(rd, $border-radius);
  .emptySubMenu {
    display: none !important;
  }
}

.item {
  background-color: param-bg-color(bg, $background-color);
  margin: 0;
  position: relative;
  display: block;
  cursor: pointer;
  list-style: none;
  @include param-transition(itemBGColorTrans, $item-background-color-transition);

  &.hover {
    .ribbonWrapper {
      display: block;
    }

    :not(.noLink) {
      > .itemWrapper > .label {
        color: param-text-color(txth, $hover-text-color);
      }

      .ribTop:after {
        border-top-color: param-border-color-alpha(bgh, $hover-border-color);
      }

      .ribBottom:after {
        border-bottom-color: param-border-color-alpha(bgh, $hover-border-color);
      }
    }

  }

  &.selectedContainer,
  &.selected {
    > .ribbonWrapper {
      display: block;

      > .ribTop:after {
        border-top-color: param-border-color-alpha(bgs, $selected-border-color);
      }

      > .ribBottom:after {
        border-bottom-color: param-border-color-alpha(bgs, $selected-border-color);
      }
    }

    > .itemWrapper > .label {
      color: param-text-color(txts, $selected-text-color);
    }
  }

  &.selected {
    > .label {
      color: param-text-color(txts, $selected-text-color) !important;
    }
  }

  &:first-child {
    @include param-border-radius(rdTop, $border-radius);
  }

  &:last-child {
    @include param-border-radius(rdBottom, $border-radius);
  }
}

.label {
  padding-left: param-padding-size(textSpacing, $text-spacing);
  padding-right: param-padding-size(textSpacing, $text-spacing);
  @include param-font(fnt, $font);
  color: param-text-color(txt, $text-color);
  display: inline;
  white-space: nowrap;
  overflow: hidden;
}

.subMenu {
  z-index: $zindex-vertical-menu-ribbon-skin-sub-menu;
  min-width: 100%;
  @include opacity(0);
  display: none;
  position: absolute;
  @include param-transition(subMenuOpacityTrans, $sub-menu-opacity-transition);
  background-color: param-bg-color(SKINS_bgSubmenu, $sub-menu-background-color);
  border: solid 0 transparent;
  @include param-border-radius(SKINS_submenuBR, $sub-menu-border-radius);
  @include param-box-shadow(shd, $box-shadow);

  .label {
    @include param-font(SKINS_fntSubmenu, $sub-menu-font);
  }

  > .item {
    &.hover:not(.noLink) {
      background-color: param-border-color-alpha(bgh, $hover-border-color);
      @include param-transition(itemBGColorTrans, $item-background-color-transition);

      .label {
        color: param-text-color(txth, $hover-text-color);
      }
    }

    &.selected {
      background-color: param-border-color-alpha(bgs, $selected-border-color);
    }
  }

  .item {
    background-color: param-bg-color(SKINS_bgSubmenu, $sub-menu-background-color);

    &:first-child {
      @include param-border-radius(dropDownRdTop, $sub-menu-border-radius);

      &:last-child {
        @include param-border-radius(SKINS_submenuBR, $sub-menu-border-radius);
      }
    }

    &:last-child {
      @include param-border-radius(dropDownRdBottom, $sub-menu-border-radius);
    }
  }

  &:before {
    content: " ";
    display: block;
    width: param-margin-size(SKINS_submenuMargin, $sub-menu-margin);
    height: 100%;
    position: absolute;
    top: 0;
  }
}

.itemWrapper {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;

  &.hover > .subMenu {
    @include opacity(1);
    @include param-transition(subMenuOpacityTrans, $sub-menu-opacity-transition);
    display: block;
  }
}

.ribbonWrapper {
  display: none;
  width: 100%;
  position: absolute;
  top: 10px;
  bottom: 10px;
  left: 0;
}

span {
  position: absolute;
  width: calc(100% + 10px);
  height: 50%;
  overflow: hidden;

  &:after {
    width: 100%;
    height: 100%;
    position: absolute;
    content: "";
    border: solid 1000px transparent;
  }
}

[data-state~="subMenuOpenSide-left"],
[data-state~="subMenuOpenSide-right"] {
  .ribTop {
    top: 0;

    &:after {
      top: 0;

    }
  }

  .ribBottom {
    bottom: 0;

    &:after {
      bottom: 0;
    }
  }

  .ribFold {
    position: absolute;
    bottom: -9px;
    right: -10px;
    width: 0;
    height: 0;
    border-style: solid;
    border-color: mutate-color-alpha-param(SKINS_foldh, brightness, .7, bgh) transparent transparent;
  }
}

[data-state~="subMenuOpenSide-right"] {
  .ribTop,
  .ribBottom {
    left: -10px;

    &:after {
      right: 7px;
      border-top-color: param-border-color-alpha(bgh, $hover-border-color);
      border-right-width: 500px;
    }
  }

  .ribFold {
    border-width: 0 10px 10px 0;
  }

  .item {
    &.selected,
    &.selectedContainer {
      > .ribbonWrapper > .ribFold {
        border-color: transparent mutate-color-alpha-param(SKINS_folds, brightness, .7, bgs) transparent transparent;
      }
    }
  }

  .subMenu {
    left: 100%;
    float: left;
    margin-left: param-margin-size(SKINS_submenuMargin, $sub-menu-margin);

    &:before {
      left: 0;
      margin-left: calc(-1 * #{param-margin-size(SKINS_submenuMargin, $sub-menu-margin)});
    }
  }
}

[data-state~="subMenuOpenSide-left"] {
  .ribTop,
  .ribBottom {
    right: -10px;
    left: 7px;
    border-top-color: param-border-color-alpha(bgh, $hover-border-color);
    border-left-width: 500px;
  }

  .ribFold {
    border-width: 10px 10px 0 0;
  }

  .item {
    &.selected,
    &.selectedContainer {
      > .ribbonWrapper > .ribFold {
        border-color: mutate-color-alpha-param(SKINS_folds, brightness, .7, bgs) transparent transparent;
      }
    }
  }

  .subMenu {
    right: 100%;
    float: right;
    margin-right: param-margin-size(SKINS_submenuMargin, $sub-menu-margin);

    &:before {
      right: 0;
      margin-right: calc(-1 * #{param-margin-size(SKINS_submenuMargin, $sub-menu-margin)});
    }
  }
}

[data-state~="items-align-left"] .item {
  text-align: left;
}

[data-state~="items-align-center"] .item {
  text-align: center;
}

[data-state~="items-align-right"] .item {
  text-align: right;
}

[data-state~="subItems-align-left"] .subMenu > .item {
  text-align: left;
  padding-left: param-padding-size(textSpacing, $text-spacing);
  padding-right: mutate-size-param(subItemAlterAlignPad, increase, 7, textSpacing);
}

[data-state~="subItems-align-center"] .subMenu > .item {
  text-align: center;
}

[data-state~="subItems-align-right"] .subMenu > .item {
  text-align: right;
  padding-left: mutate-size-param(subItemAlterAlignPad, increase, 7, textSpacing);
  padding-right: param-padding-size(textSpacing, $text-spacing);
}

[data-state~="subMenuOpenDir-down"] .subMenu {
  top: 0;
}

[data-state~="subMenuOpenDir-up"] .subMenu {
  bottom: 0;
}
