@charset "UTF-8";

@import '../../mixins/components-base';
@import 'menuButtonBase';

// ***************************************************************************************************************************************
// NOTE: *DO NOT* change the param names on existing skins (e.g. brd, shd, bg, etc) - the first argument passed to the param() functions.
// these are saved in the site's data, changing them will break the site.
// you may give skin params any name you wish - but only in new components and their (new) skins.
// ***************************************************************************************************************************************
$txt: color_15;
$txth: color_15;
$txts: color_15;
$fnt: font_1;
$bgh: color_17;
$bgs: color_18;
$pad: 5px;
$els: 10;
$bg-drop: color_11;
$ribbon-shadow: 2px 0 2px 0 rgba(0, 0, 0, .2);
$trans: background-color .2s ease 0s;
$trans1: background-color .2s ease 0s, top .2s ease 0s, bottom .2s ease 0s;
$ribbon-transition: background-color .2s ease 0s, top .2s ease 0s, bottom .2s ease 0s;
$trans2: color .2s ease 0s;
$trans3: border-width .2s ease .2s;

@include define-mapped-param(childrenSpacing, pad);

:host {
  cursor: pointer;
  display: inline-block;
  padding-left: param-padding-left-size(pad, $pad);
  box-sizing: border-box;
}

#bg {
  margin: 0 param-border-size(els, $els);
}

#label {
  position: relative;
  display: inline-block;
  padding: 0 .5em;
  @include param-font(fnt, $fnt);
  color: param-text-color(txt, $txt);
}

.bgWrapper {
  @include abs-distances(0, 0, 0, param-size(pad, $pad));
}

.ribbon {
  background-color: transparent;
  @include abs-distance(param-size(els, $els));
  @include param-transition(trans1R, $ribbon-transition);
}

.fold {
  position: absolute;
  margin-left: 0;
  width: 0;
  height: 0;
  border: solid 0 transparent;
  border-left-width: param-border-size(els, $els);
}

.top {
  position: absolute;
  top: 0;
  left: 0;
  border-bottom: solid 0 mutate-color-alpha-param(elmOver, brightness, .7, bgh);
}

.bottom {
  position: absolute;
  bottom: 0;
  left: 0;
  border-top: solid 0 mutate-color-alpha-param(elmOver, brightness, .7, bgh);
}

[data-state~="drop"] {
  width: 100%;
  display: block;
  padding: 0;

  .bgWrapper {
    display: none;
  }

  #bg {
    background-color: param-bg-color(bgDrop, $bg-drop);
    @include param-transition(trans, $trans);
    margin: 0;
  }

  &[data-state~="over"],
  &[data-state~="selected"] {
    @include param-transition(trans, $trans);
  }

  &[data-state~="over"] #bg {
    background-color: param-bg-color(bgh, $bgh);
  }

  &[data-state~="selected"] #bg {
    background-color: param-bg-color(bgs, $bgs);
  }
}

[data-state~="over"],
[data-state~="selected"] {
  .ribbon {
    @include param-box-shadow(ribbonShd, $ribbon-shadow);
    @include param-transition(trans1, $trans1);
    top: 0;
    bottom: 0;
  }

  .top,
  .bottom {
    @include param-transition(trans3, $trans3);
  }

  .top {
    border-bottom-width: param-border-size(els, $els);
  }

  .bottom {
    border-top-width: param-border-size(els, $els);
  }

  #label {
    @include param-transition(trans2, $trans2);
  }
}

[data-state~="over"] {
  .ribbon {
    background-color: param-bg-color(bgh, $bgh);
  }

  .top {
    border-bottom-color: mutate-color-alpha-param(elmOver, brightness, .7, bgh);
  }

  .bottom {
    border-top-color: mutate-color-alpha-param(elmOver, brightness, .7, bgh);
  }

  #label {
    color: param-text-color(txth, $txth);
  }
}

[data-state~="selected"] {
  .ribbon {
    background-color: param-bg-color(bgs, $bgs);
  }

  .top {
    border-bottom-color: mutate-color-alpha-param(elmSelected, brightness, .7, bgs);
  }

  .bottom {
    border-top-color: mutate-color-alpha-param(elmSelected, brightness, .7, bgs);
  }

  #label {
    color: param-text-color(txts, $txts);
  }
}

