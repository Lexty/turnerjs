/**
 * Created by noamr on 11/08/2016.
 */
define([
    'lodash', 'testUtils',
    'documentServices/theme/theme',
    'documentServices/dataModel/dataModel',
    'documentServices/component/component',
    'documentServices/mockPrivateServices/privateServicesHelper',
    'documentServices/mobileConversion/modules/mobilePropertiesHandler'
], function(_, testUtils, theme, dataModel, componentAPI, privateServicesHelper, mobilePropertiesHandler) {
    "use strict";
describe('x', function(){ // beforeEach must be wrapped with a describe
    var ps;
    var PAGE_ID = 'page';
    var linkBarProps1 = {type: 'LinkBarProperties', gallery: 'clipart', iconSize: 20, spacing: 15, bgScale: 1, orientation: 'HORIZ'};
    var linkBarProps2 = {type: 'LinkBarProperties', gallery: 'clipart', iconSize: 22, spacing: 18, bgScale: 1, orientation: 'HORIZ'};
    var linkBarProps1Modified = _.defaults({metaData: {autoGenerated: true}, iconSize: 35, spacing: 15, id: 'mobile_props'}, linkBarProps2);

    beforeEach(function() { //eslint-disable-line santa/no-jasmine-outside-describe
        ps = privateServicesHelper.mockPrivateServicesWithRealDAL(testUtils.mockFactory.mockSiteData());
    });

    function createPageWithComponent(component, desktopProperties, mobileProperties) {
        var page = ps.dal.addPageWithDefaults(PAGE_ID, [_.defaults(component, {id: 'comp'})]);
        if (desktopProperties) {
            page.addProperties(_.assign({id: 'props'}, desktopProperties));
        }
        if (mobileProperties) {
            page.addProperties(_.assign({id: 'mobile_props'}, mobileProperties));
        }
    }

    describe('Mobile Properties Handler', function() {
        describe('modifyComponentProperties', function() {
            it('should be falsy for components without properties', function() {
                var component = {componentType: 'someComponent'};
                createPageWithComponent(component);
                var result = mobilePropertiesHandler.modifyComponentProperties(ps, component, PAGE_ID, {override: false});
                expect(result).toBeFalsy();
            });

            it('should be falsy for components with invalid properties', function() {
                var component = {componentType: 'someComponent', propertyQuery: 'garbage'};
                createPageWithComponent(component);
                var result = mobilePropertiesHandler.modifyComponentProperties(ps, component, PAGE_ID, {override: false});
                expect(result).toBeFalsy();
            });

            it('should be falsy for components that shouldnt be modified', function() {
                var component = {componentType: 'wixapps.integration.components.ImageButton', propertyQuery: 'props'};
                createPageWithComponent(component, {type: 'ImageButtonProperties', transition: 'fade'});
                var result = mobilePropertiesHandler.modifyComponentProperties(ps, component, PAGE_ID, {override: false});
                expect(result).toBeFalsy();
            });

            it('should modify properties for components that should be modified when they dont have mobile properties', function() {
                var component = {componentType: 'wysiwyg.viewer.components.LinkBar', propertyQuery: 'props'};
                createPageWithComponent(component, linkBarProps1);
                var result = mobilePropertiesHandler.modifyComponentProperties(ps, component, PAGE_ID, {override: false});
                expect(result).toEqual('mobile_props');
                expect(ps.dal.get(ps.pointers.data.getPropertyItem('mobile_props'))).toEqual(linkBarProps1Modified);
            });

            it('should modify properties for components that should be modified when they have auto-generated mobile properties', function() {
                var component = {componentType: 'wysiwyg.viewer.components.LinkBar', propertyQuery: 'props'};
                createPageWithComponent(component, linkBarProps1);
                var result = mobilePropertiesHandler.modifyComponentProperties(ps, component, PAGE_ID, {override: false});
                expect(result).toEqual('mobile_props');
                expect(ps.dal.get(ps.pointers.data.getPropertyItem('mobile_props'))).toEqual(linkBarProps1Modified);
            });

            it('should modify properties for components that should be modified when they have non-auto-generated mobile properties but override is true', function() {
                var component = {componentType: 'wysiwyg.viewer.components.LinkBar', propertyQuery: 'props'};
                createPageWithComponent(component, linkBarProps1, _.assign({metaData: {autoGenerated: false}}, linkBarProps2));
                var result = mobilePropertiesHandler.modifyComponentProperties(ps, component, PAGE_ID, {override: true});
                expect(result).toEqual('mobile_props');
                expect(ps.dal.get(ps.pointers.data.getPropertyItem('mobile_props'))).toEqual(linkBarProps1Modified);
            });

            it('should not modify properties for components that should be modified when they have non-auto-generated mobile properties but override is false', function() {
                var component = {componentType: 'wysiwyg.viewer.components.LinkBar', propertyQuery: 'props'};
                createPageWithComponent(component, linkBarProps1, _.assign({metaData: {autoGenerated: false}}, linkBarProps2));
                var result = mobilePropertiesHandler.modifyComponentProperties(ps, component, PAGE_ID, {override: false});
                expect(result).toEqual('mobile_props');
                expect(ps.dal.get(ps.pointers.data.getPropertyItem('mobile_props'))).toEqual(_.assign({id: 'mobile_props', metaData: {autoGenerated: false}}, linkBarProps2));
            });

            it('should modify properties for components that should be modified when they have mobile properties', function() {
                var component = {componentType: 'wysiwyg.viewer.components.LinkBar', propertyQuery: 'props'};
                createPageWithComponent(component, linkBarProps1, _.assign({metaData: {autoGenerated: true}}, linkBarProps2));
                var result = mobilePropertiesHandler.modifyComponentProperties(ps, component, PAGE_ID, {override: false});
                expect(result).toEqual('mobile_props');
                expect(ps.dal.get(ps.pointers.data.getPropertyItem('mobile_props'))).toEqual(linkBarProps1Modified);
            });

        });
    });
});
});
