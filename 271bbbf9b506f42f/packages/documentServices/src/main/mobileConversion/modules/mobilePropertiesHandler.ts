'use strict';

import * as _ from 'lodash';
import * as constants from 'documentServices/constants/constants';
import * as componentsMetaData from 'documentServices/componentsMetaData/componentsMetaData';

function modifyComponentProperties(ps: ps, webComponent: Component, pageId: string, options: {override: boolean}): string {
    const propertyQuery = webComponent.propertyQuery;
    const componentType = webComponent.componentType;

    if (!propertyQuery || !componentType) {
        return null;
    }

    const desktopPropsPointer = ps.pointers.data.getPropertyItem(propertyQuery, pageId);
    if (!desktopPropsPointer) {
        return null;
    }

    const desktopCompProperties = ps.dal.get(desktopPropsPointer);
    if (!desktopCompProperties) {
        return null;
    }

    const propsToModify = componentsMetaData.public.getDefaultMobileProperties(ps, webComponent, desktopCompProperties);
    if (!propsToModify) {
        return null;
    }

    let mobileCompPropertyQuery = propertyQuery.replace('#', '');
    mobileCompPropertyQuery = (_.startsWith(mobileCompPropertyQuery, constants.DOM_ID_PREFIX.MOBILE) ? "" : constants.DOM_ID_PREFIX.MOBILE) + mobileCompPropertyQuery;
    const mobilePropsPointer = ps.pointers.data.getPropertyItem(mobileCompPropertyQuery, pageId);
    const mobileCompProperties = ps.dal.get(mobilePropsPointer) || {};

    if (!_.get(mobileCompProperties, 'metaData.autoGenerated', true) && !options.override) {
        return mobileCompPropertyQuery;
    }

    _.merge(mobileCompProperties, desktopCompProperties, {metaData: {autoGenerated: true}}, propsToModify);

    mobileCompProperties.id = mobileCompPropertyQuery;

    ps.dal.set(mobilePropsPointer, mobileCompProperties);
    return mobileCompPropertyQuery;
}

export {
    modifyComponentProperties
}